# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: Build image

on:
  workflow_call:
    inputs:
      project_id:
        required: true
        type: string
      project_type:
        required: true
        description: "Type of project: either 'nextjs' or 'django'"
        type: string
      docker_image_name:
        required: false
        type: string
        default: ${{ vars.DOCKER_IMAGE_REPO }}
      docker_build_cache_image_name:
        required: false
        type: string
        default: ${{ vars.DOCKER_IMAGE_BUILD_REPO }}
      docker_registry:
        required: false
        type: string
        default: ${{ vars.DOCKER_REGISTRY }}
      sentry_org:
        required: false
        default: ${{ vars.SENTRY_ORG }}
        type: string
      sentry_url:
        required: false
        default: ${{ vars.SENTRY_URL }}
        type: string
      sentry_project:
        required: false
        default: ${{ vars.SENTRY_PROJECT }}
        type: string
      django_project:
        required: false
        type: string
      dockerfile:
        required: false
        type: string
    secrets:
      DOCKER_USERNAME:
        required: true
      DOCKER_PASSWORD:
        required: true
      NPM_TOKEN:
        required: false
      NPM_USER:
        required: false
      NPM_PASSWORD:
        required: false
      SENTRY_AUTH_TOKEN:
        required: false
      EXTRA_PYPI_INDEX:
        required: false
    outputs:
      image_id:
        description: "SHA digest for the built image"
        value: "${{ jobs.build.outputs.image_id }}"
      image_registry:
        description: "Docker registry where image was pushed"
        value: "${{ inputs.docker_registry }}"
      image:
        description: "Full image path (including registry)"
        value: "${{ jobs.build.outputs.image }}"
      image_tag:
        description: "Tag for the pushed image"
        value: "${{ jobs.build.outputs.image_tag }}"
      build_id:
        description: "Unique ID for the fresh build"
        value: "${{ jobs.build.outputs.build_id }}"
      deployment_env:
        description: "Environment in which the image should be deployed"
        value: "${{ jobs.build.outputs.deployment_env }}"

env:
  IMAGE_NAME: ${{ inputs.docker_image_name }}
  IMAGE_FULL_PATH: ${{ inputs.docker_registry }}/${{ inputs.docker_image_name }}
  GIT_REPO_URL: ${{ github.server_url }}/${{ github.repository }}

jobs:
  build:
    name: Build
    runs-on: runner-prod
    permissions:
      id-token: write
      packages: write
      attestations: write
      contents: read
    container:
      image: harbor.kausal.tech/library/ubuntu:latest

    concurrency:
      group: ${{ inputs.docker_registry }}/${{ inputs.docker_image_name }}

    outputs:
      image_id: ${{ steps.build_output.outputs.imageid }}
      image: ${{ inputs.docker_registry }}/${{ inputs.docker_image_name }}
      image_tag: ${{ steps.context.outputs.git_image_tag }}
      image_digest: ${{ steps.check_existing.outputs.digest || steps.build_output.outputs.digest }}
      build_id: ${{ steps.check_existing.outputs.build_id || steps.build_meta.outputs.build_id }}
      deployment_env: ${{ steps.context.outputs.deployment_env }}

    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set build context
        run: |
          if [ "${{ startsWith(github.ref, 'refs/heads/deployment/') }}" == "true" ] ; then
            echo "deployment_env=$(echo ${{ github.ref }} | cut -d / -f 4)" >> $GITHUB_OUTPUT
          else
            echo "deployment_env=" >> $GITHUB_OUTPUT
          fi
          git_short_sha=$(echo ${{ github.sha }} | cut -c -7)
          git_tag=git-${git_short_sha}

          DOCKERFILE_DIRS=". ./kausal_common/docker ./docker ./docker/app"
          for dir in $DOCKERFILE_DIRS; do
            if [ -f "${dir}/Dockerfile" ]; then
              echo "DOCKERFILE=${dir}/Dockerfile" >> $GITHUB_ENV
              echo "dockerfile=${dir}/Dockerfile" >> $GITHUB_OUTPUT
              dockerfile_found=1
              break
            fi
          done
          if [ -z "$dockerfile_found" ]; then
            echo "Error: Dockerfile not found in any of the specified locations: $DOCKERFILE_DIRS"
            exit 1
          fi

          echo "git_image_tag=${git_tag}" >> $GITHUB_OUTPUT
          echo "GIT_IMAGE_TAG=${git_tag}" >> $GITHUB_ENV
          echo "git_short_sha=$git_short_sha" >> $GITHUB_OUTPUT
        id: context
        shell: bash

      - name: Log into Docker registry
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.docker_registry }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Check if an image for this git head already exists
        id: check_existing
        run: |
          image_info=$(mktemp --suffix=.json)
          echo "Output to $image_info"
          set +e
          docker buildx imagetools inspect ${{ env.IMAGE_FULL_PATH }}:${{ steps.context.outputs.git_image_tag }} --format '{{ json . }}' > $image_info
          if [ $? -ne 0 ] ; then
            echo status=not_found >> $GITHUB_OUTPUT
            exit 0
          fi
          set -e
          digest=$(cat $image_info | jq -j .manifest.digest)
          build_id="$(cat $image_info | jq -j '.image.config.Labels."org.opencontainers.image.version"')"
          echo "Digest: $digest"
          echo "Build ID: $build_id"
          if [ -z "$digest" -o -z "$build_id" ] ; then
            echo status=not_found >> $GITHUB_OUTPUT
            exit 0
          fi

          echo status=found >> $GITHUB_OUTPUT
          echo digest=$digest >> $GITHUB_OUTPUT
          echo "build_id=$build_id" >> $GITHUB_OUTPUT
          echo "IMAGE_BUILD_ID=$build_id" >> $GITHUB_ENV
          echo "sentry_version=${{ inputs.sentry_project }}@${build_id}" >> $GITHUB_OUTPUT

      - name: Determine build env variables
        if: steps.check_existing.outputs.status != 'found'
        run: |
          github_run=$(printf "%04g" $GITHUB_RUN_NUMBER)
          git_sha=${{ steps.context.outputs.git_short_sha }}
          build_id=$(date +%Y%m%d_%H%M)_${git_sha}
          echo "build_id=${build_id}" >> $GITHUB_OUTPUT
          echo IMAGE_BUILD_ID=$build_id >> $GITHUB_ENV
          echo "sentry_version=${{ inputs.sentry_project }}@${build_id}" >> $GITHUB_OUTPUT
        id: build_meta

      - name: Determine Docker tags and labels
        id: docker_meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_FULL_PATH }}
          tags: |
            type=raw,value=${{steps.context.outputs.git_image_tag}}
            type=raw,value=build-${{steps.build_meta.outputs.build_id}},enable=${{steps.check_existing.outputs.status != 'found'}}
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=latest-deployment-{{branch}},enable=${{steps.context.outputs.deployment_env != ''}}
            type=raw,value={{branch}}-latest,enable=${{steps.context.outputs.deployment_env != ''}}

      - name: Update existing image tags
        if: steps.check_existing.outputs.status == 'found'
        id: update_existing_tags
        run: |
          TAGS=$(echo "${{ steps.docker_meta.outputs.tags }}" | grep latest | xargs)
          updated_tags=""
          for tag in $TAGS ; do
            echo "Updating tag $tag"
            docker buildx imagetools create -t $tag ${{ env.IMAGE_FULL_PATH }}@${{ steps.check_existing.outputs.digest }} ;
            full_tag="${tag}@${{ steps.check_existing.outputs.digest }}"
            updated_tags="$updated_tags $full_tag"
          done
          echo updated_tags="$updated_tags" >> $GITHUB_OUTPUT
        shell: bash

      - name: Set up Docker Buildx
        if: steps.build_meta.outcome != 'skipped'
        uses: docker/setup-buildx-action@v3
        with:
          driver: remote
          driver-opts: ''
          endpoint: tcp://buildkitd:1234
          install: false
          cleanup: true

      - name: Build Django image
        uses: docker/build-push-action@v5
        id: build_django
        if: inputs.project_type == 'django' && steps.build_meta.outcome != 'skipped'
        env:
          BUILDX_GIT_INFO: 'false'
        with:
          context: .
          file: ${{ inputs.dockerfile || './docker/app/Dockerfile' }}
          push: true
          build-args: |
            SENTRY_ORG=${{ inputs.sentry_org }}
            SENTRY_URL=${{ inputs.sentry_url }}
            SENTRY_PROJECT=${{ inputs.sentry_project }}
            SENTRY_RELEASE=${{ steps.build_meta.outputs.sentry_version }}
            BUILD_ID=${{ steps.build_meta.outputs.build_id }}
            GIT_REPO=${{ github.repository }}
            GIT_REV=${{ github.sha }}
            GIT_REPO_URL=${{ env.GIT_REPO_URL }}
            DJANGO_PROJECT=${{ inputs.django_project || '' }}
          secrets: |
            SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }}
            EXTRA_PYPI_INDEX=${{ secrets.EXTRA_PYPI_INDEX }}
          labels: |
            ${{ steps.docker_meta.outputs.labels }}
            org.opencontainers.image.version=${{ steps.build_meta.outputs.build_id }}
          tags: |
            ${{ steps.docker_meta.outputs.tags }}
          outputs: |
            type=image,oci-mediatypes=true,compression=zstd,compression-level=12,force-compression=true,push=true,name=${{ inputs.docker_registry }}/${{ inputs.docker_image_name }}
          #cache-from: type=registry,ref=${{ inputs.docker_registry }}/${{ inputs.docker_build_cache_image_name }}:cache
          #cache-to: type=registry,ref=${{ inputs.docker_registry }}/${{ inputs.docker_build_cache_image_name }}:cache,mode=max,image-manifest=true,oci-mediatypes=true

      - name: Build NextJS bundle
        uses: docker/build-push-action@v6
        id: build_nextjs
        if: inputs.project_type == 'nextjs' && steps.build_meta.outcome != 'skipped'
        env:
          BUILDX_GIT_INFO: 'false'
          HUSKY: '0'
        with:
          context: .
          file: ${{ inputs.dockerfile || steps.context.outputs.dockerfile || './Dockerfile'}}
          push: true
          build-args: |
            SENTRY_ORG=${{ inputs.sentry_org }}
            SENTRY_URL=${{ inputs.sentry_url }}
            SENTRY_PROJECT=${{ inputs.sentry_project }}
            SENTRY_RELEASE=${{ steps.build_meta.outputs.sentry_version }}
            BUILD_ID=${{ steps.build_meta.outputs.build_id }}
            GIT_REPO=${{ github.repository }}
            GIT_REV=${{ github.sha }}
            GIT_REPO_URL=${{ env.GIT_REPO_URL }}
            NPM_REGISTRY_SERVER=${{ vars.NPM_REGISTRY_SERVER }}
          # NEXTJS_ASSET_PREFIX=${{ steps.build_meta.outputs.nextjs_asset_prefix }}
          secrets: |
            SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }}
            NPM_TOKEN=${{ secrets.NPM_TOKEN }}
            NPM_USER=${{ secrets.NPM_USER }}
            NPM_PASSWORD=${{ secrets.NPM_PASSWORD }}
          labels: |
            ${{ steps.docker_meta.outputs.labels }}
            org.opencontainers.image.version=${{ steps.build_meta.outputs.build_id }}
          tags: |
            ${{ steps.docker_meta.outputs.tags }}
          #cache-from: type=registry,ref=${{ inputs.docker_registry }}/${{ inputs.docker_build_cache_image_name }}:cache
          #cache-to: type=registry,ref=${{ inputs.docker_registry }}/${{ inputs.docker_build_cache_image_name }}:cache,mode=max,image-manifest=true,oci-mediatypes=true

      - name: Export build variables
        if: steps.build_meta.outcome != 'skipped'
        id: build_output
        run: |
          echo digest=${{ steps.build_django.outputs.digest || steps.build_nextjs.outputs.digest }} >> $GITHUB_OUTPUT
          echo imageid=${{ steps.build_django.outputs.imageid || steps.build_nextjs.outputs.imageid }} >> $GITHUB_OUTPUT

      - name: Attest image
        uses: actions/attest-build-provenance@v1
        if: steps.build_meta.outcome != 'skipped' && ! contains(github.repository, 'private')
        continue-on-error: true
        with:
          subject-name: ${{ env.IMAGE_FULL_PATH }}
          subject-digest: ${{ steps.build_output.outputs.digest }}
          push-to-registry: true

      - name: Sign the images with GitHub OIDC Token
        if: steps.build_meta.outcome != 'skipped' || steps.update_existing_tags.outputs.updated_tags
        env:
          DIGEST: ${{ steps.build_output.outputs.digest || steps.check_existing.outputs.digest }}
          # IMAGE: ${{ inputs.docker_registry }}/${{ inputs.docker_build_cache_image_name }}
        run: |
          images="${{ steps.update_existing_tags.outputs.updated_tags }} "
          BUILD_TAGS="${{ steps.docker_meta.outputs.tags }}"
          for tag in ${BUILD_TAGS}; do
            images="$images ${tag}@${DIGEST} "
          done
          echo $images | xargs cosign sign --tlog-upload=false --yes
        shell: bash

      - name: Create Sentry release
        uses: getsentry/action-release@v1
        if: steps.context.outputs.deployment_env
        continue-on-error: true
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ inputs.sentry_org }}
          SENTRY_PROJECT: ${{ inputs.sentry_project }}
          SENTRY_URL: ${{ inputs.sentry_url }}
        with:
          environment: ${{ steps.context.outputs.deployment_env }}
          version: ${{ steps.build_meta.outputs.sentry_version || steps.check_existing.outputs.sentry_version}}
